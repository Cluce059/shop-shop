{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cluce\\\\Desktop\\\\cs-stuff\\\\projects\\\\shop-shop\\\\client\\\\src\\\\components\\\\CategoryMenu\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu(_ref) {\n  let {\n    setCategory\n  } = _ref;\n  //const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  //const categories = categoryData?.categories || [];\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES); //id cat data exists/is changed by usequery then run dispatch()\n  // execute dispatch using action that determines the state of categories\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      setCategory(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["C:/Users/cluce/Desktop/cs-stuff/projects/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","QUERY_CATEGORIES","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","idbPromise","CategoryMenu","setCategory","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,YAAT,OAAuC;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACrC;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,eAAe,EAAzC;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCb,QAAQ,CAACC,gBAAD,CAAhD,CAPqC,CASrC;AACY;;AACVF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,YAAJ,EAAkB;AACdJ,MAAAA,QAAQ,CAAC;AACTK,QAAAA,IAAI,EAAEX,iBADG;AAETO,QAAAA,UAAU,EAAEG,YAAY,CAACH;AAFhB,OAAD,CAAR;AAIEG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC5CX,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBW,QAAtB,CAAV;AACC,OAFD;AAGD,KARL,MAQW,IAAI,CAACL,OAAL,EAAc;AAClBN,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCY,IAAhC,CAAqCP,UAAU,IAAI;AACnDD,QAAAA,QAAQ,CAAC;AACNK,UAAAA,IAAI,EAAEX,iBADA;AAENO,UAAAA,UAAU,EAAEA;AAFN,SAAD,CAAR;AAIC,OALD;AAMD;AACF,GAjBC,EAiBC,CAACG,YAAD,EAAeF,OAAf,EAAwBF,QAAxB,CAjBD,CAAT;;AAmBJ,QAAMS,WAAW,GAAGC,EAAE,IAAI;AACxBV,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,uBADC;AAEPgB,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOE,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGT,UAAU,CAACW,GAAX,CAAgBC,IAAD,iBACd;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbhB,MAAAA,WAAW,CAACe,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAelB,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\"; \nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu({ setCategory }) {\n  //const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  //const categories = categoryData?.categories || [];\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n  \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  //id cat data exists/is changed by usequery then run dispatch()\n              // execute dispatch using action that determines the state of categories\n    useEffect(() => {\n        if (categoryData) {\n            dispatch({\n            type: UPDATE_CATEGORIES,\n            categories: categoryData.categories\n            });\n              categoryData.categories.forEach(category => {\n              idbPromise('categories', 'put', category);\n              });\n            } else if (!loading) {\n               idbPromise('categories', 'get').then(categories => {\n               dispatch({\n                  type: UPDATE_CATEGORIES,\n                  categories: categories\n                });\n               });\n             }\n           }, [categoryData, loading, dispatch]);\n\nconst handleClick = id => {\n  dispatch({\n    type: UPDATE_CURRENT_CATEGORY,\n    currentCategory: id\n  });\n};\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            setCategory(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}