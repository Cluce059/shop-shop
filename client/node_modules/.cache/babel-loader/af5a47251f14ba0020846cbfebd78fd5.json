{"ast":null,"code":"import { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nimport { useReducer } from 'react';\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is value of `UPDATE_PRODUCTS` return new state object w updated products \n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n    // if it's none of these dont update\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}","map":{"version":3,"sources":["C:/Users/cluce/Desktop/cs-stuff/projects/shop-shop/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","useReducer","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"mappings":"AAAA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUS,WAVT;AAYE,SAASC,UAAT,QAA0B,OAA1B;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKb,eAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFL,OAAP;;AAIA,SAAKb,iBAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHI,QAAAA,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFT,OAAP;AAIN;;AACA,SAAKb,uBAAL;AACE,aAAO,EACH,GAAGS,KADA;AAEHK,QAAAA,eAAe,EAAEJ,MAAM,CAACI;AAFrB,OAAP;;AAIC,SAAKb,WAAL;AACD,aAAO,EACH,GAAGQ,KADA;AAEHM,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgBN,MAAM,CAACO,OAAvB;AAHH,OAAP;;AAKA,SAAKf,oBAAL;AACG,aAAO,EACN,GAAGO,KADG;AAENO,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACE,QAA1B;AAFA,OAAP;;AAID,SAAKT,gBAAL;AACE,UAAIe,QAAQ,GAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAkBF,OAAO,IAAI;AAC1C,eAAOA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA9B;AACD,OAFc,CAAf;AAIF,aAAO,EACH,GAAGX,KADA;AAEHM,QAAAA,QAAQ,EAAEG,QAAQ,CAACG,MAAT,GAAkB,CAFzB;AAGHL,QAAAA,IAAI,EAAEE;AAHH,OAAP;;AAKD,SAAKd,oBAAL;AACD,aAAO,EACL,GAAGK,KADE;AAELM,QAAAA,QAAQ,EAAE,IAFL;AAGJC,QAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAeL,OAAO,IAAI;AACjC,cAAIP,MAAM,CAACU,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAChCH,YAAAA,OAAO,CAACM,gBAAR,GAA2Bb,MAAM,CAACa,gBAAlC;AACD;;AACD,iBAAON,OAAP;AACH,SALY;AAHF,OAAP;;AAUN,SAAKZ,UAAL;AACI,aAAO,EACL,GAAGI,KADE;AAELM,QAAAA,QAAQ,EAAE,KAFL;AAGLC,QAAAA,IAAI,EAAE;AAHD,OAAP;;AAKA,SAAKV,WAAL;AACE,aAAO,EACP,GAAGG,KADI;AAEPM,QAAAA,QAAQ,EAAE,CAACN,KAAK,CAACM;AAFV,OAAP;;AAIF;AACE,aAAON,KAAP;AA9DJ;AAgED,CAjEM;AAoEP,OAAO,SAASe,iBAAT,CAA2BC,YAA3B,EAAwC;AAC3C,SAAOlB,UAAU,CAACC,OAAD,EAAUiB,YAAV,CAAjB;AACH","sourcesContent":["import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from \"./actions\";\n\n  import { useReducer } from'react';\n\n  export const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is value of `UPDATE_PRODUCTS` return new state object w updated products \n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products],\n        };\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n      // if it's none of these dont update\n      case UPDATE_CURRENT_CATEGORY:\n        return {\n            ...state,\n            currentCategory: action.currentCategory\n         };\n         case ADD_TO_CART:\n        return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]\n        };\n        case ADD_MULTIPLE_TO_CART:\n           return {\n            ...state,\n            cart: [...state.cart, ...action.products],\n          };\n          case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n              return product._id !== action._id;\n            });\n          \n          return {\n              ...state,\n              cartOpen: newState.length > 0,\n              cart: newState\n         };\n         case UPDATE_CART_QUANTITY:\n        return {\n          ...state,\n          cartOpen: true,\n           cart: state.cart.map(product => {\n          if (action._id === product._id) {\n          product.purchaseQuantity = action.purchaseQuantity;\n        }\n        return product;\n    })\n  };\n  case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n      case TOGGLE_CART:\n        return {\n        ...state,\n        cartOpen: !state.cartOpen\n        };\n      default:\n        return state;\n    }\n  };\n  \n\n  export function useProductReducer(initialState){\n      return useReducer(reducer, initialState);\n  }"]},"metadata":{},"sourceType":"module"}